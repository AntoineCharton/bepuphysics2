using System.Numerics;

namespace BepuUtilities
{
    public interface IVector
    {
        Vector<T> Abs<T>(Vector<T> value) where T : struct;
        Vector<T> Add<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> AndNot<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<byte> AsVectorByte<T>(Vector<T> value) where T : struct;
        Vector<double> AsVectorDouble<T>(Vector<T> value) where T : struct;
        Vector<short> AsVectorInt16<T>(Vector<T> value) where T : struct;
        Vector<int> AsVectorInt32<T>(Vector<T> value) where T : struct;
        Vector<long> AsVectorInt64<T>(Vector<T> value) where T : struct;
        Vector<sbyte> AsVectorSByte<T>(Vector<T> value) where T : struct;
        Vector<float> AsVectorSingle<T>(Vector<T> value) where T : struct;
        Vector<ushort> AsVectorUInt16<T>(Vector<T> value) where T : struct;
        Vector<uint> AsVectorUInt32<T>(Vector<T> value) where T : struct;
        Vector<ulong> AsVectorUInt64<T>(Vector<T> value) where T : struct;
        Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right);
        Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right);
        Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right) where T : struct;
        Vector<double> ConvertToDouble(Vector<long> value);
        Vector<double> ConvertToDouble(Vector<ulong> value);
        Vector<int> ConvertToInt32(Vector<float> value);
        Vector<long> ConvertToInt64(Vector<double> value);
        Vector<float> ConvertToSingle(Vector<uint> value);
        Vector<float> ConvertToSingle(Vector<int> value);
        Vector<uint> ConvertToUInt32(Vector<float> value);
        Vector<ulong> ConvertToUInt64(Vector<double> value);
        Vector<T> Divide<T>(Vector<T> left, Vector<T> right) where T : struct;
        T Dot<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> Equals(Vector<float> left, Vector<float> right);
        Vector<T> Equals<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> Equals(Vector<int> left, Vector<int> right);
        Vector<long> Equals(Vector<double> left, Vector<double> right);
        Vector<long> Equals(Vector<long> left, Vector<long> right);
        bool EqualsAll<T>(Vector<T> left, Vector<T> right) where T : struct;
        bool EqualsAny<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> GreaterThan(Vector<int> left, Vector<int> right);
        Vector<long> GreaterThan(Vector<long> left, Vector<long> right);
        Vector<int> GreaterThan(Vector<float> left, Vector<float> right);
        Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<long> GreaterThan(Vector<double> left, Vector<double> right);
        bool GreaterThanAll<T>(Vector<T> left, Vector<T> right) where T : struct;
        bool GreaterThanAny<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right);
        Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right);
        Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right);
        Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right);
        bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct;
        bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> LessThan(Vector<int> left, Vector<int> right);
        Vector<long> LessThan(Vector<long> left, Vector<long> right);
        Vector<int> LessThan(Vector<float> left, Vector<float> right);
        Vector<T> LessThan<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<long> LessThan(Vector<double> left, Vector<double> right);
        bool LessThanAll<T>(Vector<T> left, Vector<T> right) where T : struct;
        bool LessThanAny<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right);
        Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right);
        Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right);
        Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right);
        bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct;
        bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> Max<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> Min<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> Multiply<T>(Vector<T> left, Vector<T> right) where T : struct;
        Vector<T> Multiply<T>(T left, Vector<T> right) where T : struct;
        Vector<T> Multiply<T>(Vector<T> left, T right) where T : struct;
        Vector<ushort> Narrow(Vector<uint> source1, Vector<uint> source2);
        Vector<uint> Narrow(Vector<ulong> source1, Vector<ulong> source2);
        Vector<sbyte> Narrow(Vector<short> source1, Vector<short> source2);
        Vector<short> Narrow(Vector<int> source1, Vector<int> source2);
        Vector<int> Narrow(Vector<long> source1, Vector<long> source2);
        Vector<float> Narrow(Vector<double> source1, Vector<double> source2);
        Vector<byte> Narrow(Vector<ushort> source1, Vector<ushort> source2);
        Vector<T> Negate<T>(Vector<T> value) where T : struct;
        Vector<T> OnesComplement<T>(Vector<T> value) where T : struct;
        Vector<T> SquareRoot<T>(Vector<T> value) where T : struct;
        Vector<T> Subtract<T>(Vector<T> left, Vector<T> right) where T : struct;
        void Widen(Vector<byte> source, out Vector<ushort> dest1, out Vector<ushort> dest2);
        void Widen(Vector<ushort> source, out Vector<uint> dest1, out Vector<uint> dest2);
        void Widen(Vector<uint> source, out Vector<ulong> dest1, out Vector<ulong> dest2);
        void Widen(Vector<sbyte> source, out Vector<short> dest1, out Vector<short> dest2);
        void Widen(Vector<short> source, out Vector<int> dest1, out Vector<int> dest2);
        void Widen(Vector<int> source, out Vector<long> dest1, out Vector<long> dest2);
        void Widen(Vector<float> source, out Vector<double> dest1, out Vector<double> dest2);
        Vector<T> Xor<T>(Vector<T> left, Vector<T> right) where T : struct;
    }
}